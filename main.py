import telebot as tb
from telebot import types
from functools import partial

bot=tb.TeleBot(token='7104012758:AAHPvjgf9XwTzRDg3lHuLO2qq0pbdfLC_28')

products=["–ö—Ä–∏–ø—Ç–æ-–ü–†–û","1–°","–≠–¶–ü","–ß–∞—Ç-–±–æ—Ç"]

@bot.message_handler(commands=['start'])
def start(message):
    #bot.send_message(message.chat.id, '',reply_markup=types.ReplyKeyboardRemove())
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    btn1 = types.KeyboardButton("‚ùì –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å")
    btn2 = types.KeyboardButton("üõà –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–æ—Ç–µ")
    markup.add(btn1, btn2)
    
    bot.send_message(message.chat.id, text="{0.first_name}!\n –ß–µ–º –º–æ–≥—É –≤–∞–º –ø–æ–º–æ—á—å?".format(message.from_user), reply_markup=markup)
    
    bot.register_next_step_handler(message, step_1)


def step_1(message):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    
    if message.text == "üõà –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–æ—Ç–µ":
        bot.send_message(message.chat.id, 
                         text="–≠—Ç–æ –±–æ—Ç, —Å–æ–∑–¥–∞–Ω–Ω—ã–π –¥–ª—è –ø–æ–º–æ—â–∏ –Ω–∞—à–∏–º –∫–ª–∏–µ–Ω—Ç–∞–º. –û–Ω –º–æ–∂–µ—Ç –±—ã—Å—Ç—Ä–æ –æ—Ç–≤–µ—á–∞—Ç—å –Ω–∞ —Ç–∏–ø–æ–≤—ã–µ –≤–æ–ø—Ä–æ—Å—ã –∏–ª–∏ –ø–µ—Ä–µ–¥–∞–≤–∞—Ç—å –≤–∞—à–µ –æ–±—Ä–∞—â–µ–Ω–∏–µ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞–º", 
                         reply_markup=markup.add(types.KeyboardButton("–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")))
        
        bot.register_next_step_handler(message, start)
        
        
    elif message.text == "‚ùì –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å":
        #bot.send_message(message.chat.id, '',reply_markup=types.ReplyKeyboardRemove())
        product_change(message,markup)
    
    else:
        bot.send_message(message.chat.id, text="–ù–µ–≤–µ—Ä–Ω—ã–π –≤–≤–æ–¥. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
        bot.register_next_step_handler(message, step_1)
                
        
        
        
def product_change(message,markup=None):
    if markup==None:
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
  
    for product in products:
        markup.add(types.KeyboardButton(product))
        
    markup.add(types.KeyboardButton("–î—Ä—É–≥–æ–µ"))
    
    bot.send_message(message.chat.id, text="–í—ã–±–µ—Ä–∏—Ç–µ —Ç–µ–º—É –≤–æ–ø—Ä–æ—Å–∞", reply_markup=markup)
    
    bot.register_next_step_handler(message, step_2)
    
    
    
def step_2(message):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    
    if  message.text=='/start':
        start(message)
        
    elif message.text=='–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é':
        bot.register_next_step_handler(message, start)
    
    elif message.text=='–î—Ä—É–≥–æ–µ':
          operator(message)
    
    elif message.text not in products:
        bot.send_message(message.chat.id, text="–£ –Ω–∞—Å –Ω–µ—Ç —Ç–∞–∫–æ–≥–æ –ø—Ä–æ–¥—É–∫—Ç–∞.\n–ï—Å–ª–∏ —Ç–µ–º—ã –≤–∞—à–µ–≥–æ –≤–æ–ø—Ä–æ—Å–∞ –Ω–µ—Ç –≤ —Å–ø–∏—Å–∫–µ, —Ç–æ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É <–î—Ä—É–≥–æ–µ>")   
        product_change(message,markup)
        
    else:
        product=message.text
        product_actions(message, product)


def product_actions(message, product, markup=None, change=None):
    
    if markup==None:
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        
    actions=["–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–æ–¥—É–∫—Ç–µ", "–ü—Ä–∞–π—Å","–ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è"]
    
    if change:
        actions.remove(change)
        text="–ß—Ç–æ –≤–∞—Å –µ—â—ë –∏–Ω—Ç–µ—Ä—Å—É–µ—Ç?"
    else:
        text="–ß—Ç–æ –≤–∞—Å –∏–Ω—Ç–µ—Ä—Å—É–µ—Ç?"
        
    for action in actions:
        markup.add(types.KeyboardButton(action))

    markup.add(types.KeyboardButton("–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"))

    bot.send_message(message.chat.id, text=text, reply_markup=markup)

    bot.register_next_step_handler(message, partial(step_3, product=product))
    
    
    
def step_3(message, product):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)

    if  message.text=='/start' or message.text=='–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é':
        start(message)
        
    elif message.text=="–ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è":
        operator(message, product=product)
           
    elif message.text not in ['–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–æ–¥—É–∫—Ç–µ','–ü—Ä–∞–π—Å']: 
        bot.send_message(message.chat.id, text=f"–Ø –≤–∞—Å –Ω–µ –ø–æ–Ω–∏–º–∞—é. –í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç –æ—Ç–≤–µ—Ç–∞ –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö")
        product_actions(message, product, markup)
        
    else: 
        if message.text=='–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–æ–¥—É–∫—Ç–µ':
            bot.send_message(message.chat.id, text=f"–ó–¥–µ—Å—å –±—É–¥–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø—Ä–æ {product}")

        elif message.text=='–ü—Ä–∞–π—Å':
            bot.send_message(message.chat.id, text=f"–ó–¥–µ—Å—å –±—É–¥–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø—Ä–æ –ø—Ä–∞–π—Å –¥–ª—è {product}")

        product_actions(message, product, markup, message.text)


                
def operator(message, product=None):
    def process_question(message):
        if message.text=="–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é" or message.text=="/start":
          start(message)
          
        else:
            # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –≤–æ–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –Ω–∞–ø—Ä–∏–º–µ—Ä, —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –µ–≥–æ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
            bot.send_message(message.chat.id, text="–í–∞—à –≤–æ–ø—Ä–æ—Å –ø–µ—Ä–µ–¥–∞–Ω —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç—É")
            start(message)
            
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    
    if product:
        bot.send_message(message.chat.id, text=f"–ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å –∫–∞—Å–∞—Ç–µ–ª—å–Ω–æ {product}, —è –ø–µ—Ä–µ–¥–∞–º –µ–≥–æ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç—É",reply_markup=markup.add(types.KeyboardButton("–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")))
    
    else:
        bot.send_message(message.chat.id, text=f"–ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å –∏ —è –ø–µ—Ä–µ–¥–∞–º –µ–≥–æ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç—É",reply_markup=markup.add(types.KeyboardButton("–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")))
    
    bot.register_next_step_handler(message, process_question)


    
bot.polling(none_stop=True, interval=0)
